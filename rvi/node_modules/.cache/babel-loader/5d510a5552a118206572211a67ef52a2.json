{"remainingRequest":"/media/alessio/Files/Universita/Magistrale/AI/SHRI/flightbooking-chatbot/rasa-voice-interface/node_modules/babel-loader/lib/index.js!/media/alessio/Files/Universita/Magistrale/AI/SHRI/flightbooking-chatbot/rasa-voice-interface/src/store.js","dependencies":[{"path":"/media/alessio/Files/Universita/Magistrale/AI/SHRI/flightbooking-chatbot/rasa-voice-interface/src/store.js","mtime":1577442544066},{"path":"/media/alessio/Files/Universita/Magistrale/AI/SHRI/flightbooking-chatbot/rasa-voice-interface/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/alessio/Files/Universita/Magistrale/AI/SHRI/flightbooking-chatbot/rasa-voice-interface/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _JSON$stringify from \"/media/alessio/Files/Universita/Magistrale/AI/SHRI/flightbooking-chatbot/rasa-voice-interface/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$freeze from \"/media/alessio/Files/Universita/Magistrale/AI/SHRI/flightbooking-chatbot/rasa-voice-interface/node_modules/@babel/runtime-corejs2/core-js/object/freeze\";\n\n/* eslint-disable no-param-reassign */\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nvar initialActiveData = {\n  componentName: '',\n  values: []\n};\n\nvar initialActiveDataImmutable = _Object$freeze(initialActiveData);\n\nexport default new Vuex.Store({\n  state: {\n    userId: undefined,\n    currentInput: '',\n    inputVisible: false,\n    typing: false,\n    currentActiveData: initialActiveData,\n    allMessages: [{\n      text: 'Hello, Im Sara How can I help you?',\n      method: 'in',\n      iconStyle: 'none',\n      format: 'message'\n    }],\n    currentQuickReply: {\n      format: 'quick_replies',\n      method: 'in',\n      iconStyle: 'none',\n      quickReplies: [{\n        title: 'Start!',\n        payload: 'start-bot'\n      }]\n    },\n    incomeMessage: [],\n    outgoMessage: {\n      text: ''\n    },\n    currentEmailForm: undefined,\n    activeConnection: false,\n    chatStart: false,\n    waitForResponse: false,\n    disableRecording: false\n  },\n  getters: {\n    userId: function userId(state) {\n      return state.userId;\n    },\n    allMessages: function allMessages(state) {\n      return state.allMessages;\n    },\n    currentQuickReply: function currentQuickReply(state) {\n      return state.currentQuickReply;\n    },\n    inputVisible: function inputVisible(state) {\n      return state.inputVisible;\n    },\n    chatStart: function chatStart(state) {\n      return state.chatStart;\n    },\n    typing: function typing(state) {\n      return state.typing;\n    },\n    currentInput: function currentInput(state) {\n      return state.currentInput;\n    },\n    currentActiveData: function currentActiveData(state) {\n      return state.currentActiveData;\n    },\n    activeConnection: function activeConnection(state) {\n      return state.activeConnection;\n    },\n    outgoMessage: function outgoMessage(state) {\n      return state.outgoMessage;\n    },\n    waitForResponse: function waitForResponse(state) {\n      return state.waitForResponse;\n    },\n    getCurrentIncomingMessage: function getCurrentIncomingMessage(state) {\n      return state.incomeMessage[0] ? state.incomeMessage[0] : {\n        text: ''\n      };\n    }\n  },\n  mutations: {\n    setUserId: function setUserId(state, str) {\n      state.userId = str;\n    },\n    removeOldIncomingMessage: function removeOldIncomingMessage(state) {\n      if (state.incomeMessage.length > 1) {\n        console.log(\"REMOVED MESSAGE: \".concat(state.incomeMessage[0].text));\n        state.incomeMessage.shift();\n      }\n    },\n    addOutgoingMessage: function addOutgoingMessage(state, data) {\n      // state.incomeMessage = [];\n      // state.waitForResponse = true;\n      state.outgoMessage = data;\n    },\n    addIncomingMessages: function addIncomingMessages(state, data) {\n      state.incomeMessage.push(data);\n    },\n    setCurrentQuickReply: function setCurrentQuickReply(state, obj) {\n      state.currentQuickReply = obj;\n    },\n    setTypingIndicator: function setTypingIndicator(state, val) {\n      state.typing = val;\n    },\n    setInputVisible: function setInputVisible(state, val) {\n      state.inputVisible = val;\n    },\n    setCurrentInput: function setCurrentInput(state, val) {\n      state.currentInput = val;\n    },\n    setResponseStatus: function setResponseStatus(state, val) {\n      state.waitForResponse = val;\n    },\n    hideComponentsAfterSend: function hideComponentsAfterSend(state) {\n      state.currentActiveData = JSON.parse(_JSON$stringify(initialActiveDataImmutable));\n      state.currentQuickReply = undefined;\n      state.currentInput = '';\n      state.inputVisible = false;\n    },\n    setActiveConnection: function setActiveConnection(state, val) {\n      state.activeConnection = val;\n    },\n    setChatStart: function setChatStart(state, val) {\n      state.chatStart = val;\n    },\n    setRecordingAvalibility: function setRecordingAvalibility(state, val) {\n      state.disableRecording = val;\n    },\n    emptyIncomingMessage: function emptyIncomingMessage(state) {\n      state.incomeMessage = [];\n    }\n  },\n  actions: {}\n});",{"version":3,"sources":["/media/alessio/Files/Universita/Magistrale/AI/SHRI/flightbooking-chatbot/rasa-voice-interface/src/store.js"],"names":["Vue","Vuex","use","initialActiveData","componentName","values","initialActiveDataImmutable","Store","state","userId","undefined","currentInput","inputVisible","typing","currentActiveData","allMessages","text","method","iconStyle","format","currentQuickReply","quickReplies","title","payload","incomeMessage","outgoMessage","currentEmailForm","activeConnection","chatStart","waitForResponse","disableRecording","getters","getCurrentIncomingMessage","mutations","setUserId","str","removeOldIncomingMessage","length","console","log","shift","addOutgoingMessage","data","addIncomingMessages","push","setCurrentQuickReply","obj","setTypingIndicator","val","setInputVisible","setCurrentInput","setResponseStatus","hideComponentsAfterSend","JSON","parse","setActiveConnection","setChatStart","setRecordingAvalibility","emptyIncomingMessage","actions"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport Vue from 'vue';\nimport Vuex from 'vuex';\n\nVue.use(Vuex);\nconst initialActiveData = {\n\tcomponentName: '',\n\tvalues: []\n};\nconst initialActiveDataImmutable = Object.freeze(initialActiveData);\n\nexport default new Vuex.Store({\n\tstate: {\n\t\tuserId: undefined,\n\t\tcurrentInput: '',\n\t\tinputVisible: false,\n\t\ttyping: false,\n\t\tcurrentActiveData: initialActiveData,\n\t\tallMessages: [\n\t\t\t{\n\t\t\t\ttext: 'Hello, Im Sara How can I help you?',\n\t\t\t\tmethod: 'in',\n\t\t\t\ticonStyle: 'none',\n\t\t\t\tformat: 'message'\n\t\t\t}\n\t\t],\n\t\tcurrentQuickReply: {\n\t\t\tformat: 'quick_replies',\n\t\t\tmethod: 'in',\n\t\t\ticonStyle: 'none',\n\t\t\tquickReplies: [\n\t\t\t\t{\n\t\t\t\t\ttitle: 'Start!',\n\t\t\t\t\tpayload: 'start-bot'\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\tincomeMessage: [],\n\t\toutgoMessage: { text: '' },\n\t\tcurrentEmailForm: undefined,\n\t\tactiveConnection: false,\n\t\tchatStart: false,\n\t\twaitForResponse: false,\n\t\tdisableRecording: false\n\t},\n\tgetters: {\n\t\tuserId: state => state.userId,\n\t\tallMessages: state => state.allMessages,\n\t\tcurrentQuickReply: state => state.currentQuickReply,\n\t\tinputVisible: state => state.inputVisible,\n\t\tchatStart: state => state.chatStart,\n\t\ttyping: state => state.typing,\n\t\tcurrentInput: state => state.currentInput,\n\t\tcurrentActiveData: state => state.currentActiveData,\n\t\tactiveConnection: state => state.activeConnection,\n\t\toutgoMessage: state => state.outgoMessage,\n\t\twaitForResponse: state => state.waitForResponse,\n\t\tgetCurrentIncomingMessage: state => (state.incomeMessage[0] ? state.incomeMessage[0] : { text: '' })\n\t},\n\tmutations: {\n\t\tsetUserId: (state, str) => {\n\t\t\tstate.userId = str;\n\t\t},\n\t\tremoveOldIncomingMessage: state => {\n\t\t\tif (state.incomeMessage.length > 1) {\n\t\t\t\tconsole.log(`REMOVED MESSAGE: ${state.incomeMessage[0].text}`);\n\t\t\t\tstate.incomeMessage.shift();\n\t\t\t}\n\t\t},\n\t\taddOutgoingMessage: (state, data) => {\n\t\t\t// state.incomeMessage = [];\n\t\t\t// state.waitForResponse = true;\n\t\t\tstate.outgoMessage = data;\n\t\t},\n\t\taddIncomingMessages(state, data) {\n\t\t\tstate.incomeMessage.push(data);\n\t\t},\n\t\tsetCurrentQuickReply: (state, obj) => {\n\t\t\tstate.currentQuickReply = obj;\n\t\t},\n\t\tsetTypingIndicator: (state, val) => {\n\t\t\tstate.typing = val;\n\t\t},\n\t\tsetInputVisible: (state, val) => {\n\t\t\tstate.inputVisible = val;\n\t\t},\n\t\tsetCurrentInput: (state, val) => {\n\t\t\tstate.currentInput = val;\n\t\t},\n\t\tsetResponseStatus: (state, val) => {\n\t\t\tstate.waitForResponse = val;\n\t\t},\n\t\thideComponentsAfterSend: state => {\n\t\t\tstate.currentActiveData = JSON.parse(JSON.stringify(initialActiveDataImmutable));\n\t\t\tstate.currentQuickReply = undefined;\n\t\t\tstate.currentInput = '';\n\t\t\tstate.inputVisible = false;\n\t\t},\n\t\tsetActiveConnection: (state, val) => {\n\t\t\tstate.activeConnection = val;\n\t\t},\n\t\tsetChatStart: (state, val) => {\n\t\t\tstate.chatStart = val;\n\t\t},\n\t\tsetRecordingAvalibility: (state, val) => {\n\t\t\tstate.disableRecording = val;\n\t\t},\n\t\temptyIncomingMessage: state => {\n\t\t\tstate.incomeMessage = [];\n\t\t}\n\t},\n\tactions: {}\n});\n"]}]}