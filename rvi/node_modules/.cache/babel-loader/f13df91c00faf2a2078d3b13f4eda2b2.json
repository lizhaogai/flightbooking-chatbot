{"remainingRequest":"/media/alessio/Files/Universita/Magistrale/AI/SHRI/project/rasa-voice-interface/node_modules/babel-loader/lib/index.js!/media/alessio/Files/Universita/Magistrale/AI/SHRI/project/rasa-voice-interface/src/mixins/MessageHandlerMixin.js","dependencies":[{"path":"/media/alessio/Files/Universita/Magistrale/AI/SHRI/project/rasa-voice-interface/src/mixins/MessageHandlerMixin.js","mtime":1577442544066},{"path":"/media/alessio/Files/Universita/Magistrale/AI/SHRI/project/rasa-voice-interface/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/alessio/Files/Universita/Magistrale/AI/SHRI/project/rasa-voice-interface/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/media/alessio/Files/Universita/Magistrale/AI/SHRI/project/rasa-voice-interface/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _objectSpread from \"/media/alessio/Files/Universita/Magistrale/AI/SHRI/project/rasa-voice-interface/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { mapGetters } from 'vuex';\nimport store from '../store';\nvar MessageHandlerMixin = {\n  name: 'MessageHandlerMixin',\n  computed: _objectSpread({}, mapGetters(['userId', 'currentInput'])),\n  methods: {\n    sendMessageToBot: function sendMessageToBot(text) {\n      /* Send message to the bot if it isn't empty */\n      if (text && text.length >= 1 && text.replace(/\\s/g, '').length !== 0) {\n        /* Append to array of messages (so that it gets rendered to the screen) */\n        console.log('type:', _typeof(text)); // console.log('text:', text);\n\n        this.$store.commit('emptyIncomingMessage');\n        this.$store.commit('addOutgoingMessage', {\n          text: this.currentInput\n        });\n        this.$socket.emit('user_uttered', {\n          message: text,\n          room: this.userId\n        });\n      } else if (_typeof(text) === 'object') {\n        console.log('type:', _typeof(text));\n        this.$store.commit('emptyIncomingMessage'); // this.$store.commit('addOutgoingMessage', { text: this.currentInput });\n\n        this.$socket.emit('user_uttered', {\n          message: text,\n          room: this.userId\n        });\n      }\n    },\n    sendQrPayloadToBot: function sendQrPayloadToBot(qrObj) {\n      if (qrObj.text && qrObj.payload) {\n        this.$store.commit('addOutgoingMessage', qrObj);\n        this.$socket.emit('user_uttered', {\n          message: qrObj.payload,\n          room: this.userId\n        }); // this.$store.commit('hideComponentsAfterSend');\n      }\n    },\n    sendFormToBot: function sendFormToBot(formObj) {\n      if (formObj.text) {\n        var messagePayload = {\n          method: 'message',\n          text: formObj.text,\n          channel: 'Web',\n          user: this.userId,\n          emailFrom: formObj.emailFrom ? formObj.emailFrom : undefined,\n          emailContent: formObj.emailContent ? formObj.emailContent : undefined,\n          action_type: formObj.action_type\n        };\n        this.$socket.sendObj(messagePayload);\n        this.$store.commit('hideComponentsAfterSend');\n      }\n    } // scrollChatToBottom: function() {\n    // \t$('.chat-container').stop();\n    // \tconst scrollPosition = Math.round($('.chat-container')[0].scrollHeight);\n    // \t$('.chat-container').animate({ scrollTop: scrollPosition }, 1000);\n    // }\n\n  }\n};\nexport default MessageHandlerMixin;",{"version":3,"sources":["/media/alessio/Files/Universita/Magistrale/AI/SHRI/project/rasa-voice-interface/src/mixins/MessageHandlerMixin.js"],"names":["mapGetters","store","MessageHandlerMixin","name","computed","methods","sendMessageToBot","text","length","replace","console","log","$store","commit","currentInput","$socket","emit","message","room","userId","sendQrPayloadToBot","qrObj","payload","sendFormToBot","formObj","messagePayload","method","channel","user","emailFrom","undefined","emailContent","action_type","sendObj"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,MAA3B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAMC,mBAAmB,GAAG;AAC3BC,EAAAA,IAAI,EAAE,qBADqB;AAE3BC,EAAAA,QAAQ,oBAAOJ,UAAU,CAAC,CAAC,QAAD,EAAW,cAAX,CAAD,CAAjB,CAFmB;AAG3BK,EAAAA,OAAO,EAAE;AACRC,IAAAA,gBAAgB,EAAE,0BAASC,IAAT,EAAe;AAChC;AACA,UAAIA,IAAI,IAAIA,IAAI,CAACC,MAAL,IAAe,CAAvB,IAA4BD,IAAI,CAACE,OAAL,CAAa,KAAb,EAAoB,EAApB,EAAwBD,MAAxB,KAAmC,CAAnE,EAAsE;AACtE;AACCE,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,UAA6BJ,IAA7B,GAFqE,CAGrE;;AACA,aAAKK,MAAL,CAAYC,MAAZ,CAAmB,sBAAnB;AACA,aAAKD,MAAL,CAAYC,MAAZ,CAAmB,oBAAnB,EAAyC;AAAEN,UAAAA,IAAI,EAAE,KAAKO;AAAb,SAAzC;AACA,aAAKC,OAAL,CAAaC,IAAb,CAAkB,cAAlB,EAAkC;AAAEC,UAAAA,OAAO,EAAEV,IAAX;AAAiBW,UAAAA,IAAI,EAAE,KAAKC;AAA5B,SAAlC;AACA,OAPD,MAOO,IAAI,QAAQZ,IAAR,MAAkB,QAAtB,EAAgC;AACtCG,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,UAA6BJ,IAA7B;AACA,aAAKK,MAAL,CAAYC,MAAZ,CAAmB,sBAAnB,EAFsC,CAGtC;;AACA,aAAKE,OAAL,CAAaC,IAAb,CAAkB,cAAlB,EAAkC;AAAEC,UAAAA,OAAO,EAAEV,IAAX;AAAiBW,UAAAA,IAAI,EAAE,KAAKC;AAA5B,SAAlC;AACA;AACD,KAhBO;AAiBRC,IAAAA,kBAAkB,EAAE,4BAASC,KAAT,EAAgB;AACnC,UAAIA,KAAK,CAACd,IAAN,IAAcc,KAAK,CAACC,OAAxB,EAAiC;AAChC,aAAKV,MAAL,CAAYC,MAAZ,CAAmB,oBAAnB,EAAyCQ,KAAzC;AACA,aAAKN,OAAL,CAAaC,IAAb,CAAkB,cAAlB,EAAkC;AAAEC,UAAAA,OAAO,EAAEI,KAAK,CAACC,OAAjB;AAA0BJ,UAAAA,IAAI,EAAE,KAAKC;AAArC,SAAlC,EAFgC,CAGhC;AACA;AACD,KAvBO;AAwBRI,IAAAA,aAAa,EAAE,uBAASC,OAAT,EAAkB;AAChC,UAAIA,OAAO,CAACjB,IAAZ,EAAkB;AACjB,YAAMkB,cAAc,GAAG;AACtBC,UAAAA,MAAM,EAAE,SADc;AAEtBnB,UAAAA,IAAI,EAAEiB,OAAO,CAACjB,IAFQ;AAGtBoB,UAAAA,OAAO,EAAE,KAHa;AAItBC,UAAAA,IAAI,EAAE,KAAKT,MAJW;AAKtBU,UAAAA,SAAS,EAAEL,OAAO,CAACK,SAAR,GAAoBL,OAAO,CAACK,SAA5B,GAAwCC,SAL7B;AAMtBC,UAAAA,YAAY,EAAEP,OAAO,CAACO,YAAR,GAAuBP,OAAO,CAACO,YAA/B,GAA8CD,SANtC;AAOtBE,UAAAA,WAAW,EAAER,OAAO,CAACQ;AAPC,SAAvB;AAUA,aAAKjB,OAAL,CAAakB,OAAb,CAAqBR,cAArB;AACA,aAAKb,MAAL,CAAYC,MAAZ,CAAmB,yBAAnB;AACA;AACD,KAvCO,CAwCR;AACA;AACA;AACA;AACA;;AA5CQ;AAHkB,CAA5B;AAmDA,eAAeX,mBAAf","sourcesContent":["import { mapGetters } from 'vuex';\nimport store from '../store';\n\nconst MessageHandlerMixin = {\n\tname: 'MessageHandlerMixin',\n\tcomputed: { ...mapGetters(['userId', 'currentInput']) },\n\tmethods: {\n\t\tsendMessageToBot: function(text) {\n\t\t\t/* Send message to the bot if it isn't empty */\n\t\t\tif (text && text.length >= 1 && text.replace(/\\s/g, '').length !== 0) {\n\t\t\t/* Append to array of messages (so that it gets rendered to the screen) */\n\t\t\t\tconsole.log('type:', typeof (text));\n\t\t\t\t// console.log('text:', text);\n\t\t\t\tthis.$store.commit('emptyIncomingMessage');\n\t\t\t\tthis.$store.commit('addOutgoingMessage', { text: this.currentInput });\n\t\t\t\tthis.$socket.emit('user_uttered', { message: text, room: this.userId });\n\t\t\t} else if (typeof (text) === 'object') {\n\t\t\t\tconsole.log('type:', typeof (text));\n\t\t\t\tthis.$store.commit('emptyIncomingMessage');\n\t\t\t\t// this.$store.commit('addOutgoingMessage', { text: this.currentInput });\n\t\t\t\tthis.$socket.emit('user_uttered', { message: text, room: this.userId });\n\t\t\t}\n\t\t},\n\t\tsendQrPayloadToBot: function(qrObj) {\n\t\t\tif (qrObj.text && qrObj.payload) {\n\t\t\t\tthis.$store.commit('addOutgoingMessage', qrObj);\n\t\t\t\tthis.$socket.emit('user_uttered', { message: qrObj.payload, room: this.userId });\n\t\t\t\t// this.$store.commit('hideComponentsAfterSend');\n\t\t\t}\n\t\t},\n\t\tsendFormToBot: function(formObj) {\n\t\t\tif (formObj.text) {\n\t\t\t\tconst messagePayload = {\n\t\t\t\t\tmethod: 'message',\n\t\t\t\t\ttext: formObj.text,\n\t\t\t\t\tchannel: 'Web',\n\t\t\t\t\tuser: this.userId,\n\t\t\t\t\temailFrom: formObj.emailFrom ? formObj.emailFrom : undefined,\n\t\t\t\t\temailContent: formObj.emailContent ? formObj.emailContent : undefined,\n\t\t\t\t\taction_type: formObj.action_type\n\t\t\t\t};\n\n\t\t\t\tthis.$socket.sendObj(messagePayload);\n\t\t\t\tthis.$store.commit('hideComponentsAfterSend');\n\t\t\t}\n\t\t},\n\t\t// scrollChatToBottom: function() {\n\t\t// \t$('.chat-container').stop();\n\t\t// \tconst scrollPosition = Math.round($('.chat-container')[0].scrollHeight);\n\t\t// \t$('.chat-container').animate({ scrollTop: scrollPosition }, 1000);\n\t\t// }\n\t}\n};\n\nexport default MessageHandlerMixin;\n"]}]}